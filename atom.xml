<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://hefeijoe.github.io/</id>
    <title>HefeiJoe Blog</title>
    <updated>2020-05-20T07:42:20.774Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://hefeijoe.github.io/"/>
    <link rel="self" href="https://hefeijoe.github.io/atom.xml"/>
    <subtitle>水滴石穿</subtitle>
    <logo>https://hefeijoe.github.io/images/avatar.png</logo>
    <icon>https://hefeijoe.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, HefeiJoe Blog</rights>
    <entry>
        <title type="html"><![CDATA[Traefik V2.0.2基于Kubernetes的安装]]></title>
        <id>https://hefeijoe.github.io/post/tekton-pilepine-install/</id>
        <link href="https://hefeijoe.github.io/post/tekton-pilepine-install/">
        </link>
        <updated>2020-05-20T07:05:06.000Z</updated>
        <content type="html"><![CDATA[<h1 id="核心概念">核心概念</h1>
<p>Traefik 是一个边缘路由器，是你整个平台的大门，拦截并路由每个传入的请求：它知道所有的逻辑和规则，这些规则确定哪些服务处理哪些请求；传统的反向代理需要一个配置文件，其中包含路由到你服务的所有可能路由，而 Traefik 会实时检测服务并自动更新路由规则，可以自动服务发现。<br>
<img src="https://uploader.shimo.im/f/iyHnEdPIrUQBxeSd.png!thumbnail" alt="img" loading="lazy"><br>
首先，当启动 Traefik 时，需要定义 entrypoints（入口点），然后，根据连接到这些 entrypoints 的路由来分析传入的请求，来查看他们是否与一组规则相匹配，如果匹配，则路由可能会将请求通过一系列中间件转换过后再转发到你的服务上去。在了解 Traefik 之前有几个核心概念我们必须要了解：</p>
<ul>
<li><strong>Providers</strong> 用来自动发现平台上的服务，可以是编排工具、容器引擎或者 key-value 存储等，比如 Docker、Kubernetes、File。</li>
<li><strong>Entrypoints</strong> 监听传入的流量（端口等…），是网络入口点，它们定义了接收请求的端口（HTTP 或者 TCP）。</li>
<li><strong>Routers</strong> 分析请求（host, path, headers, SSL, …），负责将传入请求连接到可以处理这些请求的服务上去。</li>
<li><strong>Services</strong> 将请求转发给你的应用（load balancing, …），负责配置如何获取最终将处理传入请求的实际服务。</li>
<li><strong>Middlewares</strong> 中间件，用来修改请求或者根据请求来做出一些判断（authentication, rate limiting, headers, …），中间件被附件到路由上，是一种在请求发送到你的服务之前（或者在服务的响应发送到客户端之前）调整请求的一种方法。</li>
</ul>
<h1 id="部署">部署</h1>
<p>由于 Traefik 2.X 版本和之前的 1.X 版本不兼容，我们这里选择功能更加强大的 2.X 版本进行部署，我们这里使用的镜像是 traefik:2.0.2。<br>
在 Traefik 中的配置可以使用两种不同的方式：</p>
<ul>
<li><strong>动态配置</strong>：完全动态的路由配置</li>
<li><strong>静态配置</strong>：启动配置<br>
静态配置中的元素（这些元素不会经常更改）连接到 providers 并定义 Treafik 将要监听的 entrypoints。<br>
在 Traefik 中有三种方式定义静态配置：在配置文件中、在命令行参数中、通过环境变量传递<br>
动态配置包含定义系统如何处理请求的所有配置内容，这些配置是可以改变的，而且是无缝热更新的，没有任何请求中断或连接损耗。<br>
在Kubernetes集群下，采用Deployment的方式部署traefik，并且打开kubernetes ingress，以及prometheus metrics。<br>
<em>注：默认安装在<strong>default</strong>下</em><br>
<img src="https://uploader.shimo.im/f/Unab5H1mprceZQuX.png!thumbnail" alt="img" loading="lazy"></li>
</ul>
<h3 id="crd与rbac">CRD与RBAC</h3>
<p>首先，定义CRD包括IngressRoute和Middleware。并且通过RBAC授权资源。<br>
参见：http://advgitlab.eastasia.cloudapp.azure.com/WISE-PaaS-4.0-Ops/EnSaaS_DevOps_APIM/blob/master/example/traefik/traefik-crd.yaml<br>
<em>注：默认安装在<strong>default</strong>下</em></p>
<pre><code>apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  name: ingressroutes.traefik.containo.us
spec:
  group: traefik.containo.us
  version: v1alpha1
  names:
​    kind: IngressRoute
​    plural: ingressroutes
​    singular: ingressroute
  scope: Namespaced
---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  name: ingressroutetcps.traefik.containo.us
spec:
  group: traefik.containo.us
  version: v1alpha1
  names:
​    kind: IngressRouteTCP
​    plural: ingressroutetcps
​    singular: ingressroutetcp
  scope: Namespaced
---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  name: middlewares.traefik.containo.us
spec:
  group: traefik.containo.us
  version: v1alpha1
  names:
​    kind: Middleware
​    plural: middlewares
​    singular: middleware
  scope: Namespaced
---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  name: tlsoptions.traefik.containo.us
spec:
  group: traefik.containo.us
  version: v1alpha1
  names:
​    kind: TLSOption
​    plural: tlsoptions
​    singular: tlsoption
  scope: Namespaced
---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  name: traefikservices.traefik.containo.us
spec:
  group: traefik.containo.us
  version: v1alpha1
  names:
​    kind: TraefikService
​    plural: traefikservices
​    singular: traefikservice
  scope: Namespaced
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  name: traefik-ingress-controller
rules:
  - apiGroups:
​      - &quot;&quot;
​    resources:
​      - services
​      - endpoints
​      - secrets
​    verbs:
​      - get
​      - list
​      - watch
  - apiGroups:
​      - extensions
​    resources:
​      - ingresses
​    verbs:
​      - get
​      - list
​      - watch
  - apiGroups:
​      - extensions
​    resources:
​      - ingresses/status
​    verbs:
​      - update
  - apiGroups:
​      - traefik.containo.us
​    resources:
​      - middlewares
​    verbs:
​      - get
​      - list
​      - watch
  - apiGroups:
​      - traefik.containo.us
​    resources:
​      - ingressroutes
​    verbs:
​      - get
​      - list
​      - watch
  - apiGroups:
​      - traefik.containo.us
​    resources:
​      - ingressroutetcps
​    verbs:
​      - get
​      - list
​      - watch
  - apiGroups:
​      - traefik.containo.us
​    resources:
​      - tlsoptions
​    verbs:
​      - get
​      - list
​      - watch
  - apiGroups:
​      - traefik.containo.us
​    resources:
​      - traefikservices
​    verbs:
​      - get
​      - list
​      - watch
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  name: traefik-ingress-controller
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: traefik-ingress-controller
subjects:
  - kind: ServiceAccount
​    name: traefik-ingress-controller
​    namespace: default
</code></pre>
<h3 id="service">Service</h3>
<p>参见：http://advgitlab.eastasia.cloudapp.azure.com/WISE-PaaS-4.0-Ops/EnSaaS_DevOps_APIM/blob/master/example/traefik/traefik-service.yaml</p>
<pre><code>apiVersion: v1
kind: Service
metadata:
  name: traefik
spec:
 type: LoadBalancer
  ports:
​    - protocol: TCP
​      name: web
​      port: 8000
​    - protocol: TCP
​      name: admin
​      port: 8080
​    - protocol: TCP
​      name: websecure
​      port: 4443
​    - protocol: TCP
​      name: prometheus
​      port: 8082
  selector:
​    app: traefik
</code></pre>
<p>部署完成traefik的EXTERNAL-IP为<a href="http://172.21.92.148:8080/dashboard/#/">172.21.92.146</a></p>
<h3 id="deployments">Deployments</h3>
<p>参见：http://advgitlab.eastasia.cloudapp.azure.com/WISE-PaaS-4.0-Ops/EnSaaS_DevOps_APIM/blob/master/example/traefik/traefik-deployment.yaml</p>
<pre><code>apiVersion: v1
kind: ServiceAccount
metadata:
 name: traefik-ingress-controller
---
kind: Deployment
apiVersion: apps/v1
metadata:
 name: traefik
 labels:
  app: traefik
spec:
 replicas: 1
 selector:
  matchLabels:
   app: traefik
 template:
  metadata:
   labels:
​    app: traefik
  spec:
   serviceAccountName: traefik-ingress-controller
   containers:
​    - name: traefik
​     image: traefik:v2.0.2
​     args:
​      - --api.insecure
​      - --accesslog
​      - --entrypoints.web.Address=:8000
​      - --entrypoints.websecure.Address=:4443
​      - --providers.kubernetescrd
​      - --certificatesresolvers.default.acme.tlschallenge
​      - --certificatesresolvers.default.acme.email=foo@you.com
​      - --certificatesresolvers.default.acme.storage=acme.json
​      - --providers.kubernetesingress=true
​      - --providers.kubernetesingress.ingressclass=traefik
​      - --metrics.prometheus=true
​      - --entryPoints.metrics.address=:8082
​      - --metrics.prometheus.entryPoint=metrics
​      *# Please note that this is the staging Let's Encrypt server.*
​      *# Once you get things working, you should remove that whole line altogether.*
​      - --certificatesresolvers.default.acme.caserver=https://acme-staging-v02.api.letsencrypt.org/directory
​     ports:
​      - name: web
​       containerPort: 8000
​      - name: websecure
​       containerPort: 4443
​      - name: admin
​       containerPort: 8080
​      - name: prometheus
​       containerPort: 8082
</code></pre>
<h3 id="访问dashboard">访问DashBoard</h3>
<p>访问8080端口，<a href="http://172.21.92.148:8080/dashboard/#/">http://172.21.92.146:8080/dashboard/#/</a><br>
可以查看开启的端口、添加的HTTP服务、添加的TCP服务、启用的Middleware、启用的Features、已经授信的功能。<br>
<img src="https://uploader.shimo.im/f/9KL50flf9hg1UaL8.png!thumbnail" alt="img" loading="lazy"></p>
<h2 id="helm-chart部署traefik">Helm Chart部署Traefik</h2>
<p>Helm Chart地址：https://github.com/containous/traefik-helm-chart<br>
helm install --namespace=default  ./traefik-helm-chart</p>
]]></content>
    </entry>
</feed>