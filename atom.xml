<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://hefeijoe.github.io/</id>
    <title>HefeiJoe Blog</title>
    <updated>2020-06-22T03:29:20.908Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://hefeijoe.github.io/"/>
    <link rel="self" href="https://hefeijoe.github.io/atom.xml"/>
    <subtitle>水滴石穿</subtitle>
    <logo>https://hefeijoe.github.io/images/avatar.png</logo>
    <icon>https://hefeijoe.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, HefeiJoe Blog</rights>
    <entry>
        <title type="html"><![CDATA[单例模式的应用场景]]></title>
        <id>https://hefeijoe.github.io/post/singeleton/</id>
        <link href="https://hefeijoe.github.io/post/singeleton/">
        </link>
        <updated>2020-06-22T02:37:07.000Z</updated>
        <content type="html"><![CDATA[<h2 id="定义">定义😀</h2>
<p>单例模式是最简单的设计模式之一，属于创建型模式，它提供了一种创建对象的方式，确保只有单个对象被创建。<br>
这个设计模式主要目的是想在整个系统中只能出现类的一个实例，即一个类只有一个对象。<br>
单例模式能够实现懒加载，能够在使用实例的时候才去创建实例。开发工具类库中的很多工具类都应用了单例模式，比例线程池、缓存、日志对象等，它们都只需要创建一个对象。<br>
如果创建多份实例，可能会带来不可预知的问题，比如资源的浪费、结果处理不一致等问题。单例模式的解决的痛点就是节约资源，节省时间从两个方面看。</p>
<ol>
<li>由于频繁使用的对象，可以省略创建对象所花费的时间，这对于那些重量级的对象而言，是很重要的.</li>
<li>因为不需要频繁创建对象，我们的GC压力也减轻了，而在GC中会有STW(stop the world)，从这一方面也节约了GC的时间 单例模式的缺点：简单的单例模式设计开发都比较简单，但是复杂的单例模式需要考虑线程安全等并发问题，引入了部分复杂度。</li>
</ol>
<table>
<thead>
<tr>
<th>饿汉式</th>
<th>线程安全</th>
<th>并发性能好</th>
<th>可以延迟加载</th>
<th>序列化/反序列化安全</th>
<th>能抵御反射攻击</th>
</tr>
</thead>
<tbody>
<tr>
<td>饿汉式</td>
<td>Y</td>
<td>Y</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>懒汉式</td>
<td>不加锁</td>
<td></td>
<td>Y</td>
<td>Y</td>
<td></td>
</tr>
<tr>
<td>加锁的</td>
<td>Y</td>
<td></td>
<td>Y</td>
<td></td>
<td></td>
</tr>
<tr>
<td>DCL</td>
<td>Y</td>
<td>Y</td>
<td>Y</td>
<td></td>
<td></td>
</tr>
<tr>
<td>静态内部类</td>
<td>Y</td>
<td>Y</td>
<td>Y</td>
<td></td>
<td></td>
</tr>
<tr>
<td>枚举</td>
<td>Y</td>
<td>Y</td>
<td></td>
<td>Y</td>
<td>Y</td>
</tr>
</tbody>
</table>
<h2 id="设计">设计😁</h2>
<p>设计单例模式的时候一般需要考虑几种因素:</p>
<ul>
<li>线程安全</li>
<li>延迟加载</li>
<li>代码安全:如防止序列化攻击，防止反射攻击(防止反射进行私有方法调用)</li>
<li>性能因素<br>
饿汉，懒汉(线程安全，线程非安全)，双重检查(DCL)(重点),内部类，以及枚举(重点)。</li>
</ul>
<h2 id="实现">实现😘</h2>
<h3 id="饿汉模式">饿汉模式</h3>
<pre><code>/**
 * 饿汉式单例
 * 线程安全，但没有达到懒加载目的
 */
public class Singeleton{
    private static final Singeleton instance = new Singeleton();
    // 私有化构造函数
    private Singeleton(){
        // To Do
    }
    public static Singeleton getInstance(){
        return instance;
    }
}
</code></pre>
<p><strong>instance什么时候被初始化？</strong></p>
<p>Singleton类被加载的时候就会被初始化，java虚拟机规范虽然没有强制性约束在什么时候开始类加载过程，但是对于类的初始化，虚拟机规范则严格规定了有且只有四种情况必须立即对类进行初始化，遇到new、getStatic、putStatic或invokeStatic这4条字节码指令时，如果类没有进行过初始化，则需要先触发其初始化。<br>
生成这4条指令最常见的java代码场景是：</p>
<ul>
<li>使用new关键字实例化对象-</li>
<li>读取一个类的静态字段（被final修饰、已在编译期把结果放在常量池的静态字段除外）</li>
<li>设置一个类的静态字段（被final修饰、已在编译期把结果放在常量池的静态字段除外）</li>
<li>调用一个类的静态方法</li>
</ul>
<p><strong>class的生命周期?</strong><br>
class的生命周期一般来说会经历加载、连接、初始化、使用、和卸载五个阶段<br>
<strong>class的加载机制</strong><br>
这里可以聊下classloader的双亲委派模型。</p>
<h3 id="懒汉模式">懒汉模式</h3>
<h4 id="懒汉模式不加锁">懒汉模式(不加锁)</h4>
<pre><code>/**
 * 懒汉式单例
 * 适用于单线程环境（不推荐）
 * 
 * 多线程不安全
 * 
 * 此方式在单线程的时候工作正常，但在多线程的情况下就有问题了。
 * 如果两个线程同时运行到判断instance是否为null的if语句，并且instance的确没有被创建时，
 * 那么两个线程都会创建一个实例，此时类型Singleton就不再满足单例模式的要求了。
 */
public class Singeleton{
    private static Singeleton instance = null;
    private Singeleton(){}
    public Singeleton getInstance(){
        if(instance==null){
            instance = new Singeleton();
        }
        return instance;
    }
}
</code></pre>
<h4 id="懒汉模式加锁">懒汉模式(加锁)</h4>
<pre><code>/**
 * 懒汉式单例
 * 适用于多线程环境，但效率不高（不推荐）
 * 
 * 为了保证在多线程环境下我们还是只能得到该类的一个实例，
 * 只需要在getInstanceB()方法加上同步关键字sychronized，就可以了。
 * 但每次调用getInstanceB()方法时都被synchronized关键字锁住了，会引起线程阻塞，影响程序的性能。
 */
public class Singeleton {
    private static Singeleton instance = null;
    private Singeleton(){}
    public static synchronized Singeleton getInstance(){
        if(instance==null){
            instance = new Singeleton();
        }
        return instance;
    }
    public static void main(String[] args) {
        Singeleton singeleton = Singeleton.getInstance();
        System.out.println(singeleton);
    }
}
</code></pre>
<h3 id="双重检查dcl">双重检查DCL</h3>
<pre><code>/**
 * 
 * 双重检查加锁（推荐）
 * 线程安全
 * 
 */
/*
public class Singeleton{
    private static Singeleton instance;
    private Singeleton(){}
    public static Singeleton getInstance(){
        // 先判断实例是否存在，若不存在再对类对象进行加锁处理
        if(instance==null){
            synchronized(Singeleton.class){
                if(instance==null){
                    instance = new Singeleton();
                }
            }
        }
        return instance;
    }
    public static void main(String[] args) {
        Singeleton singeleton = Singeleton.getInstance();
        System.out.println(singeleton);
    }
}
</code></pre>
<p>推荐理由：</p>
<ul>
<li>延迟初始化。和懒汉模式一致，只有在初次调用静态方法getSingleton，才会初始化signleton实例。</li>
<li>性能优化。同步会造成性能下降，在同步前通过判读singleton是否初始化，减少不必要的同步开销。</li>
<li>线程安全。同步创建Singleton对象，同时注意到静态变量singleton使用volatile修饰。</li>
</ul>
<p><strong>为什么要使用volatile修饰？</strong><br>
虽然已经使用synchronized进行同步，但在第4步创建对象时，会有下面的伪代码：</p>
<pre><code>memory=allocate(); //1：分配内存空间
ctorInstance();   //2:初始化对象
singleton=memory; //3:设置singleton指向刚排序的内存空间
</code></pre>
<p>复制代码当线程A在执行上面伪代码时，2和3可能会发生重排序，因为重排序并不影响运行结果，还可以提升性能，所以JVM是允许的。如果此时伪代码发生重排序，步骤变为1-&gt;3-&gt;2,线程A执行到第3步时，线程B调用getsingleton方法，在判断singleton==null时不为null，则返回singleton。但此时singleton并还没初始化完毕，线程B访问的将是个还没初始化完毕的对象。当声明对象的引用为volatile后，伪代码的2、3的重排序在多线程中将被禁止。<br>
synchronized同步块里面能够保证只创建一个对象。但是通过在synchronized的外面增加一层判断，就可以在对象一经创建以后，不再进入synchronized同步块。这种方案不仅减小了锁的粒度，保证了线程安全，性能方面也得到了大幅提升。<br>
同时这里要注意一定要说volatile，这个很关键，volatile一般用于多线程的可见性，但是这里是用来防止指令重排序的。<br>
<strong>扩展:</strong><br>
<strong>为什么需要volatile？volatile有什么用？</strong></p>
<ol>
<li>首先要回答可见性，这个是毋庸质疑的，然后可能又会考到java内存模型。</li>
<li>防止指令重排序: 防止new Singleton时指令重排序导致其他线程获取到未初始化完的对象。instance = new Singleton()这句，这并非是一个原子操作，事实上在 JVM 中这句话大概做了下面 3 件事情。1.给 instance 分配内存2.调用 Singleton 的构造函数来初始化成员变量3.将instance对象指向分配的内存空间（执行完这步 instance 就为非 null 了）<br>
但是在 JVM 的即时编译器中存在指令重排序的优化。也就是说上面的第二步和第三步的顺序是不能保证的，最终的执行顺序可能是 1-2-3 也可能是 1-3-2。如果是后者，则在 3 执行完毕、2 未执行之前，被线程二抢占了，这时 instance 已经是非 null 了（但却没有初始化），所以线程二会直接返回 instance，然后使用，然后报错。</li>
<li>顺便也可以说下volatie原理用内存屏障</li>
</ol>
<p><strong>讲讲synchronized和volatile的区别</strong><br>
这里可以从synchroized能保证原子性，volatile不能保证说起，以及讲下synchroized是重量级锁，甚至可以所以下他和Lock的区别等等。<br>
<strong>线程安全一般怎么实现的?</strong></p>
<p>互斥同步。如lock,synchroized<br>
非阻塞同步。如cas。<br>
不同步。如threadLocal,局部变量。</p>
<h3 id="静态内部类">静态内部类</h3>
<pre><code>/**
 * 
 * 静态内部类方式（推荐）
 * 加载一个类时，其内部类不会同时被加载。一个类被加载，当且仅当其某个静态成员（静态域、构造器、静态方法等）被调用时发生。 由于在调用 StaticSingleton.getInstance() 的时候，才会对单例进行初始化，而且通过反射
 * 是不能从外部类获取内部类的属性的；由于静态内部类的特性，只有在其被第一次引用的时候才会被加载，所以可以保证其线程安全性。
 * 总结：
 * 优势：兼顾了懒汉模式的内存优化（使用时才初始化）以及饿汉模式的安全性（不会被反射入侵）。
 * 劣势：需要两个类去做到这一点，虽然不会创建静态内部类的对象，但是其 Class 对象还是会被创建，而且是属于永久带的对象。
 * 
 */
/*
public class Singeleton{
    private static Singeleton instance = null;
    private Singeleton(){}
    public static Singeleton getInstance(){
        if(instance==null){
            instance = inner.singeleton;
        }
        return instance;
    }

    public void methodA() {
        System.out.println(&quot;It's methodA&quot;);
    }

    public void methodB() {
        System.out.println(&quot;It's methodB&quot;);
    }
    private static class inner{
        private static final Singeleton singeleton = new Singeleton();
    }
    public static void main(String[] args) {
        Singeleton singeleton = Singeleton.getInstance();
        singeleton.methodA();
        singeleton.methodB();
    }
}
</code></pre>
<p><strong>推荐理由：</strong></p>
<ul>
<li>实现代码简洁。和双重检查单例对比，静态内部类单例实现代码真的是太简洁，又清晰明了。</li>
<li>延迟初始化。调用getSingleton才初始化Singleton对象。</li>
<li>线程安全。JVM在执行类的初始化阶段，会获得一个可以同步多个线程对同一个类的初始化的锁。</li>
</ul>
<p><strong>如何实现线程安全？</strong><br>
线程A和线程B同时试图获得Singleton对象的初始化锁，假设线程A获取到了，那么线程B一直等待初始化锁。线程A执行类初始化，就算双重检查模式中伪代码发生了重排序，也不会影响线程A的初始化结果。初始化完后，释放锁。线程B获得初始化锁，发现Singleton对象已经初始化完毕，释放锁，不进行初始化，获得Singleton对象。<br>
在涉及到反射和序列化的单例中，建议使用下文的枚举类型模式。</p>
<h3 id="枚举类">枚举类</h3>
<pre><code>/**
 * 
 * 枚举
 * 多线程安全
 * 能自动避免序列化/反序列化攻击，以及反射攻击(枚举类不能通过反射生成)
 */
public class Singeleton{
    private Singeleton(){}
    /**
     * 枚举类型是线程安全的，并且只会装载一次
     */
    private enum Single{
        INSTANCE;
        private final Singeleton instance;
        Single(){
            instance = new Singeleton();
        }
        private Singeleton getInstance(){
            return instance;
        }
    }
    public static Singeleton getInstance(){
        return Single.INSTANCE.getInstance();
    }
}
</code></pre>
<p>通过枚举类，他能自动避免序列化/反序列化攻击，以及反射攻击(枚举类不能通过反射生成)。<br>
参考文章：<br>
<a href="https://juejin.im/post/5cf09270f265da1bd260d239">https://juejin.im/post/5cf09270f265da1bd260d239</a><br>
<a href="https://juejin.im/post/5b50b0dd6fb9a04f932ff53f">https://juejin.im/post/5b50b0dd6fb9a04f932ff53f</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Java中的堆(heap)和栈(stack)]]></title>
        <id>https://hefeijoe.github.io/post/stackandheap/</id>
        <link href="https://hefeijoe.github.io/post/stackandheap/">
        </link>
        <updated>2020-05-28T01:48:09.000Z</updated>
        <content type="html"><![CDATA[<h1 id="栈stack">栈(stack)🤠</h1>
<p>Java里面Stack有两种含义：</p>
<h2 id="数据结构">数据结构</h2>
<p>Stack,即java.util.Stack，是Vector的一个子类，它实现了一个标准的后进先出的栈。<br>
Stack的特点为LIFO，即后进先出（Last in, first out）。</p>
<pre><code>public class Stack01 {
    public static void main(String[] args) {
        Stack&lt;Integer&gt; stack = new Stack&lt;&gt;();
        stack.push(1);//把元素压栈
        stack.empty();//判断stack是否为空
        stack.peek();//取栈顶元素但不弹出
        stack.search(1);//返回对象在堆栈中的位置，以 1 为基数。沒有查到则返回-1。
        stack.pop();//把栈顶的元素“弹出”
    }
}
</code></pre>
<p>一般与之比较的是队列Queue，队列是两个口，先进先出。</p>
<h2 id="内存区域">内存区域😚</h2>
<p>系统一般在内存中划分出两种不同的内存空间，一种是Stack(栈),一种是heap(堆)。<br>
<img src="https://pic1.zhimg.com/80/v2-e83cdfa865e6fb71caf65d7803c081bc_720w.jpg" alt="stack" loading="lazy"></p>
<h3 id="栈的组成">栈的组成</h3>
<p>栈帧由三部分组成：<strong>局部变量区</strong>、<strong>操作数栈</strong>、<strong>帧数据区</strong>。局部变量区和操作数栈的大小要视对应的方法而定，他们是按字长计算的。但调用一个方法时，它从类型信息中得到此方法局部变量区和操作数栈大小，并据此分配栈内存，然后压入Java栈。</p>
<h4 id="局部变量区">局部变量区</h4>
<p><strong>局部变量区</strong>被组织为以一个字长为单位、从0开始计数的数组，类型为short、byte和char的值在存入数组前要被转换成int值，而long和double在数组中占据连续的两项，在访问局部变量中的long或double时，只需取出连续两项的第一项的索引值即可,如某个long值在局部变量区中占据的索引时3、4项，取值时，指令只需取索引为3的long值即可。</p>
<pre><code>public static int runClassMethod(int i,long l,float f,double d,Object o,byte b) { 
    return 0;   
}
public int runInstanceMethod(char c,double d,short s,boolean b) { 
    return 0;   
}
</code></pre>
<h4 id="操作数栈">操作数栈</h4>
<p>和局部变量区一样，操作数栈也被组织成一个以字长为单位的数组。但和前者不同的是，它不是通过索引来访问的，而是通过入栈和出栈来访问的。可把操作数栈理解为存储计算时，临时数据的存储区域。<br>
操作数栈其实就是个临时数据存储区域，它是通过入栈和出栈来进行操作的。</p>
<h4 id="帧数据区">帧数据区</h4>
<p>在前面就描述过：栈是由栈帧组成，每当线程调用一个java方法时，JVM就会在该线程对应的栈中压入一个帧，而帧是由局部变量区、操作数栈和帧数据区组成。</p>
<ol>
<li>只有在调用一个方法时，才为当前栈分配一个帧，然后将该帧压入栈;</li>
<li>帧中存储了对应方法的局部数据，方法执行完，对应的帧则从栈中弹出，并把返回结果存储在调用方法的帧的操作数栈中。</li>
</ol>
<h1 id="堆">堆😵</h1>
<p>堆中分配的是对象，也就是new出来的东西。<br>
<img src="https://pic1.zhimg.com/80/v2-00dc88198eef4f42a3dd1e34ee5cd5f7_720w.jpg" alt="heap" loading="lazy"></p>
<h1 id="内存分配举个栗子">内存分配（举个栗子）</h1>
<pre><code>public void Method1()
{
    int i = 4;
    int y = 2;
    class1 cls1 = new class1();
}
</code></pre>
<p>内存分配是这样的：<br>
<img src="https://pic1.zhimg.com/80/1519fb641bdb1ee150fcfb621b0afdd8_720w.jpg" alt="img" loading="lazy"></p>
<h1 id="堆和栈的区别">堆和栈的区别🤗</h1>
<ul>
<li>功能不同<br>
栈内存用来存储局部变量和方法调用。<br>
而堆内存用来存储Java中的对象。无论是成员变量，局部变量，还是类变量，它们指向的对象都存储在堆内存中。</li>
<li>共享性不同<br>
  栈内存是线程私有的。<br>
  堆内存是所有线程共有的。</li>
<li>异常错误不同<br>
  如果栈内存或者堆内存不足都会抛出异常。<br>
  栈空间不足：java.lang.StackOverFlowError。<br>
  堆空间不足：java.lang.OutOfMemoryError。</li>
<li>空间大小<br>
  栈的空间大小远远小于堆的。</li>
<li>结构<br>
  stack是有结构的，每个区块按照一定次序存放，可以明确知道每个区块的大小；heap是没有结构的，数据可以任意存放。因此，stack的寻址速度要快于heap。</li>
<li>存放规则<br>
  数据存放的规则是：只要是局部的、占用空间确定的数据，一般都存放在stack里面，否则就放在heap里面。</li>
</ul>
<h3 id="参考文章">参考文章</h3>
<p><a href="https://www.zhihu.com/question/29833675/">https://www.zhihu.com/question/29833675</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Traefik V2基于Kubernetes的安装与使用]]></title>
        <id>https://hefeijoe.github.io/post/traefik-k8s-use/</id>
        <link href="https://hefeijoe.github.io/post/traefik-k8s-use/">
        </link>
        <updated>2020-05-20T07:05:06.000Z</updated>
        <content type="html"><![CDATA[<h1 id="核心概念">核心概念😀</h1>
<p>Traefik 是一个边缘路由器，是你整个平台的大门，拦截并路由每个传入的请求：它知道所有的逻辑和规则，这些规则确定哪些服务处理哪些请求；传统的反向代理需要一个配置文件，其中包含路由到你服务的所有可能路由，而 Traefik 会实时检测服务并自动更新路由规则，可以自动服务发现。<br>
<img src="https://docs.traefik.io/assets/img/traefik-architecture.png" alt="img" loading="lazy"><br>
首先，当启动 Traefik 时，需要定义 entrypoints（入口点），然后，根据连接到这些 entrypoints 的路由来分析传入的请求，来查看他们是否与一组规则相匹配，如果匹配，则路由可能会将请求通过一系列中间件转换过后再转发到你的服务上去。在了解 Traefik 之前有几个核心概念我们必须要了解：</p>
<ul>
<li><strong>Providers</strong> 用来自动发现平台上的服务，可以是编排工具、容器引擎或者 key-value 存储等，比如 Docker、Kubernetes、File。</li>
<li><strong>Entrypoints</strong> 监听传入的流量（端口等…），是网络入口点，它们定义了接收请求的端口（HTTP 或者 TCP）。</li>
<li><strong>Routers</strong> 分析请求（host, path, headers, SSL, …），负责将传入请求连接到可以处理这些请求的服务上去。</li>
<li><strong>Services</strong> 将请求转发给你的应用（load balancing, …），负责配置如何获取最终将处理传入请求的实际服务。</li>
<li><strong>Middlewares</strong> 中间件，用来修改请求或者根据请求来做出一些判断（authentication, rate limiting, headers, …），中间件被附件到路由上，是一种在请求发送到你的服务之前（或者在服务的响应发送到客户端之前）调整请求的一种方法。</li>
</ul>
<h1 id="部署">部署😄</h1>
<h2 id="kubernetes">Kubernetes</h2>
<p>由于 Traefik 2.X 版本和之前的 1.X 版本不兼容，我们这里选择功能更加强大的 2.X 版本进行部署，我们这里使用的镜像是 traefik:2.0.2。<br>
在 Traefik 中的配置可以使用两种不同的方式：</p>
<ul>
<li><strong>动态配置</strong>：完全动态的路由配置</li>
<li><strong>静态配置</strong>：启动配置<br>
静态配置中的元素（这些元素不会经常更改）连接到 providers 并定义 Treafik 将要监听的 entrypoints。<br>
在 Traefik 中有三种方式定义静态配置：在配置文件中、在命令行参数中、通过环境变量传递<br>
动态配置包含定义系统如何处理请求的所有配置内容，这些配置是可以改变的，而且是无缝热更新的，没有任何请求中断或连接损耗。<br>
在Kubernetes集群下，采用Deployment的方式部署traefik，并且打开kubernetes ingress，以及prometheus metrics。<br>
<em>注：默认安装在<strong>default</strong>下</em></li>
</ul>
<h3 id="crd与rbac">CRD与RBAC</h3>
<p>首先，定义CRD包括IngressRoute和Middleware。并且通过RBAC授权资源。<br>
参见：https://github.com/HefeiJoe/traefik-k8s/blob/master/traefik-crd.yaml<br>
<em>注：默认安装在<strong>default</strong>下</em></p>
<pre><code>kubectl apply -f https://github.com/HefeiJoe/traefik-k8s/blob/master/traefik-crd.yaml
</code></pre>
<h3 id="service">Service</h3>
<p>参见：https://github.com/HefeiJoe/traefik-k8s/blob/master/traefik-service.yaml</p>
<pre><code>kubectl apply -f https://github.com/HefeiJoe/traefik-k8s/blob/master/traefik-crd.yaml
</code></pre>
<p>部署完成traefik的EXTERNAL-IP为<a href="http://172.21.92.148:8080/dashboard/#/">172.21.92.146</a></p>
<h3 id="deployments">Deployments</h3>
<p>参见：https://github.com/HefeiJoe/traefik-k8s/blob/master/traefik-deployment.yaml</p>
<pre><code>kubectl apply -f https://github.com/HefeiJoe/traefik-k8s/blob/master/traefik-deployment.yaml
</code></pre>
<pre><code>apiVersion: v1
kind: ServiceAccount
metadata:
 name: traefik-ingress-controller
---
kind: Deployment
apiVersion: apps/v1
metadata:
 name: traefik
 labels:
  app: traefik
spec:
 replicas: 1
 selector:
  matchLabels:
   app: traefik
 template:
  metadata:
   labels:
​    app: traefik
  spec:
   serviceAccountName: traefik-ingress-controller
   containers:
​    - name: traefik
​     image: traefik:v2.0.2
​     args:
​      - --api.insecure
​      - --accesslog
​      - --entrypoints.web.Address=:8000
​      - --entrypoints.websecure.Address=:4443
​      - --providers.kubernetescrd
​      - --certificatesresolvers.default.acme.tlschallenge
​      - --certificatesresolvers.default.acme.email=foo@you.com
​      - --certificatesresolvers.default.acme.storage=acme.json
​      - --providers.kubernetesingress=true
​      - --providers.kubernetesingress.ingressclass=traefik
​      - --metrics.prometheus=true
​      - --entryPoints.metrics.address=:8082
​      - --metrics.prometheus.entryPoint=metrics
​      - --certificatesresolvers.default.acme.caserver=https://acme-staging-v02.api.letsencrypt.org/directory
​     ports:
​      - name: web
​       containerPort: 8000
​      - name: websecure
​       containerPort: 4443
​      - name: admin
​       containerPort: 8080
​      - name: prometheus
​       containerPort: 8082
</code></pre>
<h3 id="访问dashboard">访问DashBoard</h3>
<p>访问8080端口，<a href="http://172.21.92.148:8080/dashboard/#/">http://172.21.92.146:8080/dashboard/#/</a><br>
可以查看开启的端口、添加的HTTP服务、添加的TCP服务、启用的Middleware、启用的Features、已经授信的功能。<br>
<img src="https://uploader.shimo.im/f/9KL50flf9hg1UaL8.png!thumbnail" alt="img" loading="lazy"></p>
<h2 id="helm-chart">Helm Chart</h2>
<p>Helm Chart地址：https://github.com/containous/traefik-helm-chart<br>
helm install --namespace=default  ./traefik-helm-chart<br>
#使用</p>
<h3 id="部署whoami服务">部署whoami服务</h3>
<p>部署测试服务whoami<br>
参见：https://github.com/HefeiJoe/traefik-k8s/blob/master/whoami.yaml</p>
<h2 id="ingress">Ingress</h2>
<p>在traefik的Deployment中的arg下添加CLI<br>
<em>- --providers.kubernetesingress=true</em><br>
<em>- --providers.kubernetesingress.ingressclass=traefik</em><br>
1、创建Ingress</p>
<pre><code>kind: Ingress
apiVersion: extensions/v1beta1
metadata:
  namespace: default
 name: traefik-ingress
 annotations:
  *# use the shared ingress-nginx*
  kubernetes.io/ingress.class: traefik
</code></pre>
<p>2、验证<br>
访问服务curl -i 172.21.92.146:8000  -H &quot;Host:whoami.kong.test&quot;，接口响应200<br>
<img src="https://uploader.shimo.im/f/ffocrRF3UjkXYBEb.png!thumbnail" alt="img" loading="lazy"></p>
<h2 id="ingressroute">IngressRoute</h2>
<pre><code>apiVersion: traefik.containo.us/v1alpha1
kind: IngressRoute
metadata:
  name: simpleingressroute
  namespace: default
spec:
  entryPoints:
​    - web
  routes:
  - match: Host(`172.21.92.148`) &amp;&amp; PathPrefix(`/whoami`)
​    kind: Rule
​    services:
​    - name: whoami
​      port: 80
</code></pre>
<p>通过http://172.21.92.148:8000/whoami访问</p>
<h2 id="middlewares中间件">Middlewares（中间件）</h2>
<h3 id="overview概述">Overview（概述）</h3>
<h3 id=""><img src="https://uploader.shimo.im/f/S1b2FXezLpQkSqx3.png!thumbnail" alt="img" loading="lazy"></h3>
<p>将中间件添加到Route，在请求发送到服务之前(或在服务的响应发送到客户端之前)调整请求。<br>
Traefik中有许多不同的中间件，有些可以修改请求、头文件，有些负责重定向，有些添加身份验证，等等。<br>
<strong>给Route绑定Middleware</strong><br>
在ingressRoute中添加middlewares<br>
<em># As a Kubernetes Traefik IngressRoute</em></p>
<pre><code>apiVersion: traefik.containo.us/v1alpha1
kind: Middleware
metadata:
  name: stripprefix
spec:
  stripPrefix:
​    prefixes:
​      - /stripit
---
apiVersion: traefik.containo.us/v1alpha1
kind: IngressRoute
metadata:
  name: simpleingressroute
  namespace: default
spec:
  entryPoints:
​    - web
  routes:
  - match: Host(`172.21.92.148`) &amp;&amp; PathPrefix(`/whoami`)
​    kind: Rule
​    services:
​    - name: whoami
​      port: 80
​    middlewares:
- name: stripprefix
</code></pre>
<p>Available Middlewares<a href="https://docs.traefik.io/middlewares/overview/#available-middlewares">¶</a></p>
<table>
<thead>
<tr>
<th>Middleware</th>
<th>Purpose</th>
<th>Area</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://docs.traefik.io/middlewares/addprefix/">AddPrefix</a></td>
<td>Add a Path Prefix</td>
<td>Path Modifier</td>
</tr>
<tr>
<td><a href="https://docs.traefik.io/middlewares/basicauth/">BasicAuth</a></td>
<td>Basic auth mechanism</td>
<td>Security, Authentication</td>
</tr>
<tr>
<td><a href="https://docs.traefik.io/middlewares/buffering/">Buffering</a></td>
<td>Buffers the request/response</td>
<td>Request Lifecycle</td>
</tr>
<tr>
<td><a href="https://docs.traefik.io/middlewares/chain/">Chain</a></td>
<td>Combine multiple pieces of middleware</td>
<td>Middleware tool</td>
</tr>
<tr>
<td><a href="https://docs.traefik.io/middlewares/circuitbreaker/">CircuitBreaker</a></td>
<td>Stop calling unhealthy services</td>
<td>Request Lifecycle</td>
</tr>
<tr>
<td><a href="https://docs.traefik.io/middlewares/compress/">Compress</a></td>
<td>Compress the response</td>
<td>Content Modifier</td>
</tr>
<tr>
<td><a href="https://docs.traefik.io/middlewares/digestauth/">DigestAuth</a></td>
<td>Adds Digest Authentication</td>
<td>Security, Authentication</td>
</tr>
<tr>
<td><a href="https://docs.traefik.io/middlewares/errorpages/">Errors</a></td>
<td>Define custom error pages</td>
<td>Request Lifecycle</td>
</tr>
<tr>
<td><a href="https://docs.traefik.io/middlewares/forwardauth/">ForwardAuth</a></td>
<td>Authentication delegation</td>
<td>Security, Authentication</td>
</tr>
<tr>
<td><a href="https://docs.traefik.io/middlewares/headers/">Headers</a></td>
<td>Add / Update headers</td>
<td>Security</td>
</tr>
<tr>
<td><a href="https://docs.traefik.io/middlewares/ipwhitelist/">IPWhiteList</a></td>
<td>Limit the allowed client IPs</td>
<td>Security, Request lifecycle</td>
</tr>
<tr>
<td><a href="https://docs.traefik.io/middlewares/inflightreq/">InFlightReq</a></td>
<td>Limit the number of simultaneous connections</td>
<td>Security, Request lifecycle</td>
</tr>
<tr>
<td><a href="https://docs.traefik.io/middlewares/passtlsclientcert/">PassTLSClientCert</a></td>
<td>Adding Client Certificates in a Header</td>
<td>Security</td>
</tr>
<tr>
<td><a href="https://docs.traefik.io/middlewares/ratelimit/">RateLimit</a></td>
<td>Limit the call frequency</td>
<td>Security, Request lifecycle</td>
</tr>
<tr>
<td><a href="https://docs.traefik.io/middlewares/redirectscheme/">RedirectScheme</a></td>
<td>Redirect easily the client elsewhere</td>
<td>Request lifecycle</td>
</tr>
<tr>
<td><a href="https://docs.traefik.io/middlewares/redirectregex/">RedirectRegex</a></td>
<td>Redirect the client elsewhere</td>
<td>Request lifecycle</td>
</tr>
<tr>
<td><a href="https://docs.traefik.io/middlewares/replacepath/">ReplacePath</a></td>
<td>Change the path of the request</td>
<td>Path Modifier</td>
</tr>
<tr>
<td><a href="https://docs.traefik.io/middlewares/replacepathregex/">ReplacePathRegex</a></td>
<td>Change the path of the request</td>
<td>Path Modifier</td>
</tr>
<tr>
<td><a href="https://docs.traefik.io/middlewares/retry/">Retry</a></td>
<td>Automatically retry the request in case of errors</td>
<td>Request lifecycle</td>
</tr>
<tr>
<td><a href="https://docs.traefik.io/middlewares/stripprefix/">StripPrefix</a></td>
<td>Change the path of the request</td>
<td>Path Modifier</td>
</tr>
<tr>
<td><a href="https://docs.traefik.io/middlewares/stripprefixregex/">StripPrefixRegex</a></td>
<td>Change the path of the request</td>
<td>Path Modifier</td>
</tr>
</tbody>
</table>
<h3 id="addprefix添加前缀">AddPrefix（添加前缀）</h3>
<p><img src="https://uploader.shimo.im/f/1hy4I9o9piED68sO.png!thumbnail" alt="img" loading="lazy"><br>
<em># Prefixing with /foo</em></p>
<pre><code>apiVersion: traefik.containo.us/v1alpha1
kind: Middleware
metadata:
  name: add-foo
spec:
  addPrefix:
​    prefix: /foo
</code></pre>
<table>
<thead>
<tr>
<th>配置选项</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>prefix</td>
<td>prefix是添加在请求的URL路径之前的字符串。它应该包括前导斜杠(/)。参考<a href="https://docs.traefik.io/middlewares/addprefix/#prefix">¶</a></td>
</tr>
</tbody>
</table>
<h3 id="basicauth基本认证">BasicAuth（基本认证）</h3>
<p><img src="https://uploader.shimo.im/f/IRa08Sg9kIIT5DuU.png!thumbnail" alt="img" loading="lazy"><br>
<em># Declaring the user list</em></p>
<pre><code>apiVersion: traefik.containo.us/v1alpha1
kind: Middleware
metadata:
  name: test-auth
spec:
  basicAuth:
​    secret: secretName
</code></pre>
<table>
<thead>
<tr>
<th>配置选项</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>secret</td>
<td>绑定创建的secret。参考<a href="https://docs.traefik.io/middlewares/basicauth/#configuration-examples">¶</a></td>
</tr>
<tr>
<td>users</td>
<td>该users选项是一组授权用户。每个用户都将使用以下name:encoded-password格式声明。参考<a href="https://docs.traefik.io/middlewares/basicauth/#usersfile">¶</a></td>
</tr>
<tr>
<td>usersFile</td>
<td>该usersFile选项是包含中间件授权用户的外部文件的路径。参考<a href="https://docs.traefik.io/middlewares/basicauth/#realm">¶</a></td>
</tr>
<tr>
<td>realm</td>
<td>您可以使用realm选项来自定义身份验证领域。默认值为traefik。参考<a href="https://docs.traefik.io/middlewares/basicauth/#realm">¶</a></td>
</tr>
<tr>
<td>headerField</td>
<td>您可以使用该headerField选项定义标题字段以存储经过身份验证的用户。参考<a href="https://docs.traefik.io/middlewares/basicauth/#headerfield">¶</a></td>
</tr>
<tr>
<td>removeHeader</td>
<td>设置removeHeader选项以true在将请求转发到服务之前删除授权标头。（默认值为false。）参考<a href="https://docs.traefik.io/middlewares/basicauth/#removeheader">¶</a></td>
</tr>
</tbody>
</table>
<h3 id="circuitbreaker断路器">CircuitBreaker（断路器）</h3>
<p><img src="https://uploader.shimo.im/f/Jf3qvl3fwsgp5pDV.png!thumbnail" alt="img" loading="lazy"><br>
断路器可保护您的系统免于将请求堆叠到不正常的服务（导致级联故障）的麻烦。<br>
系统运行状况良好时，电路处于闭合状态（正常运行）。当系统运行不正常时，电路将断开，并且不再转发请求（而是由后备机制处理）。<br>
为了评估您的系统是否健康，断路器不断监视服务。<br>
<em># Latency Check</em></p>
<pre><code>apiVersion: traefik.containo.us/v1alpha1
kind: Middleware
metadata:
  name: latency-check
spec:
  circuitBreaker:
​    expression: LatencyAtQuantileMS(50.0) &gt; 100
</code></pre>
<table>
<thead>
<tr>
<th>配置选项</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>NetworkErrorRatio</td>
<td>如果您希望断路器以30％的网络错误率触发，则表达式为 NetworkErrorRatio() &gt; 0.30。参考<a href="https://docs.traefik.io/middlewares/addprefix/#prefix">¶</a></td>
</tr>
<tr>
<td>ResponseCodeRatio</td>
<td>您可以根据给定范围的状态码的比率来触发断路器。在ResponseCodeRatio接受四个参数，from，to，dividedByFrom，dividedByTo。例如，ResponseCodeRatio(500, 600, 0, 600) &gt; 0.25如果25％的请求返回5XX状态（在返回状态代码从0到5XX的请求中），则表达式将触发断路器。参考<a href="https://docs.traefik.io/middlewares/circuitbreaker/#responsecoderatio">¶</a></td>
</tr>
<tr>
<td>LatencyAtQuantileMS</td>
<td>当给定比例的请求变得太慢时，您可以触发断路器。例如，当中LatencyAtQuantileMS(50.0) &gt; 100值等待时间（分位数50）达到100MS时，该表达式将触发断路器。参考<a href="https://docs.traefik.io/middlewares/circuitbreaker/#latencyatquantilems">¶</a>您必须提供分位数的浮点数（后跟.0）</td>
</tr>
</tbody>
</table>
<h2 id="metrics">Metrics</h2>
<h3 id="prometheus">Prometheus</h3>
<p>在traefik的Deployment中的arg下添加CLI（如果采用HelmChart部署，在values.yaml的additionalArguments下添加以下CLI），并且修改Service暴露端口8082<br>
<em>- --metrics.prometheus=true</em><br>
<em>- --entryPoints.metrics.address=:8082</em><br>
<em>- --metrics.prometheus.entryPoint=metrics</em><br>
通过8082端口可以查看prometheus的metrics，<a href="http://172.21.92.148:8082/metrics">http://172.21.92.146:8082/metrics</a></p>
<h2 id="tracing">Tracing</h2>
<h3 id="zipkin">Zipkin</h3>
<p>1、部署Zipkin<br>
略<br>
2、在traefik的Deployment中的arg下添加CLI（如果采用HelmChart部署，在values.yaml的additionalArguments下添加以下CLI）<br>
<em>- --tracing.zipkin=true</em><br>
<em>- --tracing.zipkin.httpEndpoint=http://localhost:9411/api/v2/spans</em><br>
<em>- --tracing.zipkin.sampleRate=1.0</em><br>
访问zipkin的地址，http://localhost:9411/</p>
]]></content>
    </entry>
</feed>